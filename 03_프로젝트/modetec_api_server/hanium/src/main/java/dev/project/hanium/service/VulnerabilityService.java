package dev.project.hanium.service;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.ObjectMapper;
import dev.project.hanium.Entity.VulnerabilityEntity;
import dev.project.hanium.dto.VulnerabilitiesResultDto;
import dev.project.hanium.repository.VulnerabilityRepository;
import lombok.RequiredArgsConstructor;
import org.springframework.http.*;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RestTemplate;

import javax.transaction.Transactional;
import java.util.List;
import java.util.Optional;

@Service
@RequiredArgsConstructor
@Transactional
public class VulnerabilityService {
    private final String flaskServerUrl = "http://210.110.39.163:8080/vulnerabilities";
    private final RestTemplate restTemplate;
    private final ObjectMapper objectMapper;
    private final VulnerabilityRepository vulnerabilityRepository;


    public List<VulnerabilitiesResultDto> saveResult(String url) throws JsonProcessingException {
        if(!vulnerabilityRepository.existsByUrl(url)) {
            // Flask 서버로 요청 보내기
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);

            HttpEntity<String> requestEntity = new HttpEntity<>(url, headers);

            ResponseEntity<String> responseEntity = restTemplate.exchange(flaskServerUrl, HttpMethod.POST, requestEntity, String.class);

            VulnerabilityEntity entity = new VulnerabilityEntity();

            entity.setUrl(url);
            entity.setResult(responseEntity.getBody());
            vulnerabilityRepository.save(entity);
            List<VulnerabilitiesResultDto> result = objectMapper.readValue(entity.getResult(), new TypeReference<List<VulnerabilitiesResultDto>>() {
            });
            return result;
        }else{
            return getResult(url);
        }

    }

    public List<VulnerabilitiesResultDto> getResult(String url) throws JsonProcessingException {

       Optional<VulnerabilityEntity> all = vulnerabilityRepository.findByUrl(url);
        return  objectMapper.readValue(all.get().getResult(),new TypeReference<List<VulnerabilitiesResultDto>>() {});
    }

}
